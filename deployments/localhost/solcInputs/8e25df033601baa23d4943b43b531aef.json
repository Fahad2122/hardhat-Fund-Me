{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\n/** @title FundMe contract to fund and withdraw funds\n * @author Muhammad Fahad\n * @notice this contract is demo to a funding contract\n * @dev This implement priceFeed as library\n */\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  address public immutable i_owner;\n  uint256 public constant MINIMUM_USD = 1;\n\n  address[] public funders;\n  mapping(address => uint256) public amountFunded;\n\n  AggregatorV3Interface public priceFeed;\n\n  modifier onlyOwner() {\n    if(msg.sender != i_owner) revert NotOwner();\n    _;\n  }\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n      \"You did not Enough Send\"\n    );\n    funders.push(msg.sender);\n    amountFunded[msg.sender] = msg.value;\n  }\n\n  function withdraw() public onlyOwner {\n    for (uint256 i; i < funders.length; i++) {\n      amountFunded[funders[i]] = 0;\n    }\n\n    //rest array funders\n    funders = new address[](0);\n\n    // //transfer\n    // payable(msg.sender).transfer(address(this).balance);\n    // //send\n    // bool success = payable(msg.sender).send(address(this).balance);\n    // require(success, \"Did not send\");\n\n    //call\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\n      \"\"\n    );\n    require(success, \"Did not send\");\n  }\n\n  function getPriceFeed() public view returns(AggregatorV3Interface) {\n    return priceFeed;\n  }\n  function getAddressToAmountFunded(address _funder) public view returns(uint256) {\n    return amountFunded[_funder];\n  }\n  function getFunder(uint256 _index) public view returns(address) {\n    return funders[_index];\n  }\n  function getAmountFunded(address _funder) public view returns(uint256){\n    return amountFunded[_funder];\n  }\n  function getOwner() public view returns(address) {\n    return i_owner;\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) public view returns (uint256) {\n    (\n      ,\n      /* uint80 roundID */ int256 price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\n      ,\n      ,\n\n    ) = priceFeed.latestRoundData();\n\n    return uint256(price * 1e10);\n  }\n\n  function getVersion(\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    return priceFeed.version();\n  }\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n    return ethAmountInUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}